ARCH                     := $(shell uname -s)
REQUIREMENTS             := $(shell cat requirements*)
SHELL                    := /bin/bash
VIRTUAL_ENV              := .venv
PYTHON_COMMAND           := $(shell which python3)
JAVASCRIPTS              := $(shell find pref -name '*.js')

# Generate the MD5SUM of the requirements files.
# Mac and Linx have slightly different md5 commands, hense the ARCH check.
ifeq ("${ARCH}", "Darwin")
	MD5SUM := $(shell md5 -q -s "${REQUIREMENTS}")
else
	MD5SUM := $(shell echo "${REQUIREMENTS}" | md5sum | cut -d ' ' -f1)
endif

.SILENT: help
.PHONY: setup prereqs venv run clean help

default: help

# Make sure the virtualenv exists, create it if not.
$(VIRTUAL_ENV):
	python3 -m venv $(VIRTUAL_ENV)

# Check for the existence of reqs-(md5) and run pip install if missing.
$(VIRTUAL_ENV)/reqs-$(MD5SUM):
	$(VIRTUAL_ENV)/bin/pip install -r requirements.txt
	touch $(VIRTUAL_ENV)/reqs-$(MD5SUM)

venv: $(VIRTUAL_ENV) $(VIRTUAL_ENV)/reqs-$(MD5SUM)

prereqs:
ifndef PYTHON_COMMAND
	@echo "You must install python 3.6 or newer first!" && exit 42
endif

example.db:
	$(VIRTUAL_ENV)/bin/python manage.py migrate
	$(VIRTUAL_ENV)/bin/python manage.py createsuperuser

static_root: $(JAVASCRIPTS)
	$(VIRTUAL_ENV)/bin/python manage.py collectstatic --noinput

setup: prereqs venv example.db static_root ## Setup local environment

run: setup ## Run the development server locally
	$(VIRTUAL_ENV)/bin/python manage.py runserver

shell: ## Run the django shell
	$(VIRTUAL_ENV)/bin/python manage.py shell

test: ## Run the test suite
	$(VIRTUAL_ENV)/bin/python manage.py test

clean: ## Clean up the autogenerated files
	rm -rf static_root
	rm -rf .venv
	rm -f example.db
	find . -name "*.pyc" -delete

help: ## Help commands
	grep '^[a-zA-Z]' $(MAKEFILE_LIST) | awk -F ':.*?## ' 'NF==2 {printf "   %-20s%s\n", $$1, $$2}' | sort
